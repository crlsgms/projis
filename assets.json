// estagiario  POSTs

{
    "nome": "José da Silva",
    "cpf": "123.456.111-0",
    "rg": "987.648-77",
    "email": "josedasilva@zemail.com",
    "data_nascimento": "1947-10-02T03:00:00.000Z",
    "inicio_vinculo": "",
    "fim_vinculo": "2022-01-01T03:00:00.000Z",
    "curso": "Direito",
    "status": true,
    "enderecos": [
        {"logradouro": "Avenida Brasil",
         "numero": "4868",
         "cidade": "Franca",
         "estado": "SP"}
    ]
  }
  
  {
    "nome": "Maria Joaquina",
    "cpf": "123.456.133-0",
    "rg": "987.622-77",
    "email": "mariajoaquina@zmail.com",
    "data_nascimento": "1955-11-07T03:00:00.000Z",
    "inicio_vinculo": "",
    "fim_vinculo": "2023-01-01T03:00:00.000Z",
    "curso": "Serviço Social",
    "status": true,
    "enderecos": [
        {
            "logradouro": "Rua dos Marcondes",
            "numero": "282",
            "bairro": "Parque dos Ipês",
            "complemento": "Rotatória da Mabel",
            "cep": "15548-874",
            "cidade": "Miguelópolis",
            "estado": "SP"
        },
        {
            "logradouro": "Avenida Presidente Vargas",
            "numero": "1066",
            "bairro": "Centro",
            "cep": "14405-800",
            "cidade": "Franca",
            "estado": "SP"
        }
    ],
  "telefones":[
      {
        "numero": "(16)98456-8458",
        "tipo": "Celular"
      },
      {
        "numero": "(17)3745-8458",
        "tipo": "Fixo"
      }
  ]
}

[
 
    {
        "_id": "5ee7c4095aa7590e02cf57d1",
        "name": "Estagiario de exemplo",
        "cpf": "123.456.789-0",
        "rg": "11.222.333-4",
        "address": "Rua Exemplo 123",
        "phone": "999999999",
        "email": "exemlo@email.com",
        "birth": "2000-10-02T03:00:00.000Z",
        "start_date": "2000-01-01T02:00:00.000Z",
        "deadline": "2002-01-01T02:00:00.000Z",
        "__v": 0
    },
    {
        "_id": "5ee7c43e5aa7590e02cf57d3",
        "name": "Maria Joaquina",
        "cpf": "123.456.222-0",
        "rg": "11.222.222-3",
        "address": "Rua de Cima, 234",
        "phone": "991231222",
        "email": "mariajoaquina@zemail.com",
        "birth": "1988-07-21T03:00:00.000Z",
        "start_date": "2000-01-01T02:00:00.000Z",
        "deadline": "2022-01-01T03:00:00.000Z",
        "__v": 0
    },
    {
        "_id": "5ee7c45a5aa7590e02cf57d5",
        "name": "Eduardo Costa",
        "cpf": "123.456.165-0",
        "rg": "14.222.897-4",
        "address": "Avenida Brasil, 2500",
        "phone": "996299111",
        "email": "eduardo@costa.com.br",
        "birth": "1978-09-06T03:00:00.000Z",
        "start_date": "2000-01-01T02:00:00.000Z",
        "deadline": "2022-01-01T03:00:00.000Z",
        "__v": 0
    },
    {
        "_id": "5ee7c4695aa7590e02cf57d6",
        "name": "Lazaro Galhos",
        "cpf": "123.456.551-0",
        "rg": "11.245.123-4",
        "address": "Avenida Rebouças, 7458",
        "phone": "997546767",
        "email": "lgalhos@globo.com",
        "birth": "1980-09-10T03:00:00.000Z",
        "start_date": "2000-01-01T02:00:00.000Z",
        "deadline": "2022-01-01T03:00:00.000Z",
        "__v": 0
    }
]

// opponent
[
    {
        "_id": "5ee7c4985aa7590e02cf57d7",
        "name": "opponent de exemplo",
        "cpf": "000.456.789-0",
        "rg": "00.222.333-4",
        "address": "Rua do outro exemplo 654",
        "__v": 0
    },
    {
        "_id": "5ee7c4a05aa7590e02cf57d8",
        "name": "Zeca Urubu",
        "cpf": "050.846.339-0",
        "rg": "00.222.311-5",
        "address": "Rua de Baixo, 665",
        "__v": 0
    },
    {
        "_id": "5ee7c4a65aa7590e02cf57d9",
        "name": "Leonel Broas",
        "cpf": "340.456.759-1",
        "rg": "00.232.233-9",
        "address": "Rua Sudoeste, 458",
        "__v": 0
    }
]

// customer
{
	"name" : "customer de exemplo",
	"cpf" : "08007757575",
	"rg": "22.333.333-4",
	"address" : "Rua da contra mão 0",
	"phone": "1688888999999",
	"birth":"10-02-2000",
	"registred_by" : "idDoIntern"/* esse campo é type: mongoose.ObjectId. Exemplo "5ec451d72e2441670e5bc7c1"*/
}

// customers pra inserir
[
    {
        "name" : "customer de exemplo",
        "cpf" : "08007757575",
        "rg": "22.333.333-4",
        "address" : "Rua da contra mão 0",
        "phone": "1688888999999",
        "birth":"09-11-1947",
        "registred_by" : "5ee7c4695aa7590e02cf57d6"
    },
    {
        "name" : "Aparecido Siqueira",
        "cpf" : "08552457575",
        "rg": "11.333.489-4",
        "address" : "Avenida Presidente Vargas, 2002",
        "phone": "1638545858",
        "birth":"04-27-1950",
        "registred_by" : "5ee7c4695aa7590e02cf57d6"
    },
    {
        "name" : "Fransérgio Goulart",
        "cpf" : "07854267575",
        "rg": "33.312.312-4",
        "address" : "Avenida Valdemar Saloon, 45",
        "phone": "16985244518",
        "birth":"11-19-1991",
        "registred_by" : "5ee7c3d55aa7590e02cf57d0"
    }
]

// customers get
[
    {
        "_id": "5ee7d19e5aa7590e02cf57dd",
        "name": "customer de exemplo",
        "cpf": "08007757575",
        "rg": "22.333.333-4",
        "address": "Rua da contra mão 0",
        "phone": "1688888999999",
        "birth": "1947-09-11T03:00:00.000Z",
        "registred_by": {
            "_id": "5ee7c4695aa7590e02cf57d6",
            "name": "Lazaro Galhos",
            "cpf": "123.456.551-0",
            "rg": "11.245.123-4",
            "address": "Avenida Rebouças, 7458",
            "phone": "997546767",
            "email": "lgalhos@globo.com",
            "birth": "1980-09-10T03:00:00.000Z",
            "start_date": "2000-01-01T02:00:00.000Z",
            "deadline": "2022-01-01T03:00:00.000Z",
            "__v": 0
        },
        "__v": 0
    },
    {
        "_id": "5ee7d19e5aa7590e02cf57df",
        "name": "Fransérgio Goulart",
        "cpf": "07854267575",
        "rg": "33.312.312-4",
        "address": "Avenida Valdemar Saloon, 45",
        "phone": "16985244518",
        "birth": "1991-11-19T02:00:00.000Z",
        "registred_by": {
            "_id": "5ee7c3d55aa7590e02cf57d0",
            "name": "José da Silva",
            "cpf": "123.456.111-0",
            "rg": "11.222.111-4",
            "address": "Rua do Sobe e Desce, 1234",
            "phone": "991231111",
            "email": "josedasilva@zemail.com",
            "birth": "1947-10-02T03:00:00.000Z",
            "start_date": "2000-01-01T02:00:00.000Z",
            "deadline": "2022-01-01T03:00:00.000Z",
            "__v": 0
        },
        "__v": 0
    },
    {
        "_id": "5ee7d19e5aa7590e02cf57de",
        "name": "Aparecido Siqueira",
        "cpf": "08552457575",
        "rg": "11.333.489-4",
        "address": "Avenida Presidente Vargas, 2002",
        "phone": "1638545858",
        "birth": "1950-04-27T03:00:00.000Z",
        "registred_by": {
            "_id": "5ee7c4695aa7590e02cf57d6",
            "name": "Lazaro Galhos",
            "cpf": "123.456.551-0",
            "rg": "11.245.123-4",
            "address": "Avenida Rebouças, 7458",
            "phone": "997546767",
            "email": "lgalhos@globo.com",
            "birth": "1980-09-10T03:00:00.000Z",
            "start_date": "2000-01-01T02:00:00.000Z",
            "deadline": "2022-01-01T03:00:00.000Z",
            "__v": 0
        },
        "__v": 0
    }
]


// action 
[
    {
        "actionName": "Acão de exemplo",
        "opponent" : "5ee7c4a05aa7590e02cf57d8",
        "customer" : "5ee7d19e5aa7590e02cf57df"
    },
    {
        "actionName": "Acão de despejo",
        "opponent" : "5ee7c4a05aa7590e02cf57d8",
        "customer" : "5ee7d19e5aa7590e02cf57dd"
    },
    {
        "actionName": "Acão de conciliação",
        "opponent" : "5ee7c4a65aa7590e02cf57d9",
        "customer" : "5ee7d19e5aa7590e02cf57de"
    }
]

// supervisor
[
    {
        "_id": "5ee7c5065aa7590e02cf57da",
        "name": "Super Supervisor",
        "cpf": "123456789",
        "rg": "99.888.777-6",
        "__v": 0
    },
    {
        "_id": "5ee7c50c5aa7590e02cf57db",
        "name": "Advogada Chefe",
        "cpf": "423842589",
        "rg": "91.838.767-6",
        "__v": 0
    },
    {
        "_id": "5ee7c5165aa7590e02cf57dc",
        "name": "Maria das Leis",
        "cpf": "728425789",
        "rg": "97.858.757-6",
        "__v": 0
    }
]

//endereços embedados no usuario, schema no mongoose
var enderecoSchema = new Schema({
endereco : {[
    { logradouro: { 
        enum: [ "Rua", "Avenida", "Alameda", "Chácara", "Estrada", "Parque", null ],
        description: "apenas os dados do enum"
    }
    numero:{type:number},
    bairro:{},
    complemento:{},
    CEP:{},
    cidade:{type: string},
    estado:{},
    },
 ]}
})

 **** exemplo no schema direto
 enderecos:{ 
    type: Array,
    itens:{
          logradouro: String,
          numero: Number,
          bairro: String,
          complemento: String,
          cep: String,
          cidade: String,
          estado: String
          }
 },
 telefones:{ 
    type: Array,
    itens:{
          numero: String,
          tipo: String
          }
 },
****


//colas regex e validadores
$phone = '(11)99999-9999'; isValid = /^(?:(?:\+|00)?(55)\s?)?(?:\(?([1-9][0-9])\)?\s?)?(?:((?:9\d|[2-9])\d{3})\-?(\d{4}))$/.test($phone)

// exemplo array embeded
{
    name: 'Kate Monster',
    ssn: '123-456-7890',
    addresses : [
       { street: '123 Sesame St', city: 'Anytown', cc: 'USA' },
       { street: '123 Avenue Q', city: 'New York', cc: 'USA' }
    ]
  }

  schema:[

  ]

  https://json-schema.org/understanding-json-schema/reference/array.html

  // exemplos de validação
  http://learnmongodbthehardway.com/schema/schemabasics/
  https://www.mongodb.com/blog/post/6-rules-of-thumb-for-mongodb-schema-design-part-1
  https://docs.mongodb.com/manual/core/schema-validation/
  https://code.tutsplus.com/articles/an-introduction-to-mongoose-for-mongodb-and-nodejs--cms-29527

  var bookSchema = mongoose.Schema({
    _id: mongoose.Schema.Types.ObjectId,
    title: String,
    summary: String,
    isbn: String,
    thumbnail: Buffer,
    author: { 
        type: mongoose.Schema.Types.ObjectId, 
        ref: 'Author'
    },
    ratings: [
        {
            summary: String,
            detail: String,
            numberOfStars: Number,
            created: { 
                type: Date,
                default: Date.now
            }
        }
    ],
    created: { 
        type: Date,
        default: Date.now
    }
});

****
db.createCollection( "contacts",
   { validator: { $or:
      [
         { phone: { $type: "string" } },
         { email: { $regex: /@mongodb\.com$/ } },
         { status: { $in: [ "Unknown", "Incomplete" ] } }
      ]
   }
} )

validadores e regex:
email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
cpf/cnpj: ([0-9]{2}[\.]?[0-9]{3}[\.]?[0-9]{3}[\/]?[0-9]{4}[-]?[0-9]{2})|([0-9]{3}[\.]?[0-9]{3}[\.]?[0-9]{3}[-]?[0-9]{2})

*****
  db.createCollection("students", {
    validator: {
       $jsonSchema: {
          bsonType: "object",
          required: [ "name", "year", "major", "address" ],
          properties: {
             name: {
                bsonType: "string",
                description: "must be a string and is required"
             },
             year: {
                bsonType: "int",
                minimum: 2017,
                maximum: 3017,
                description: "must be an integer in [ 2017, 3017 ] and is required"
             },
             major: {
                enum: [ "Math", "English", "Computer Science", "History", null ],
                description: "can only be one of the enum values and is required"
             },
             gpa: {
                bsonType: [ "double" ],
                description: "must be a double if the field exists"
             },
             address: {
                bsonType: "object",
                required: [ "city" ],
                properties: {
                   street: {
                      bsonType: "string",
                      description: "must be a string if the field exists"
                   },
                   city: {
                      bsonType: "string",
                      "description": "must be a string and is required"
                   }
                }
             }
          }
       }
    }
 })







 *************** colas aulas
 #19
    criacao dos modulos no material
    post do blog pra adicao, e imports:
    
        cd front-end
        ng generate module material

        troca o conteudo pelo post do blog (./front-end/src/app/material/material.module.ts)

        configurar no app.module.ts pra adicionar o import
        import { MaterialModule } from './material/material.module';



gerando os modulos
cat colas.txt
cd front-end
    gerando os fronts
ng generate component ui/main-toolbar
    dentro do app.component.ts, seta as variaveis do nome do app
    mas vao ficar invocadas no var appName dentro do main-toolbar.component.ts

alteração pra ficar separadas as configuraçoes e html no angular novo
    edita o angular.json na base da aplicaçaõ e troca as linhas de template e estilo
    "schematics": {
        "@schematics/angular:component": {
          "inlineTemplate": false,
          "inlineStyle": false,
          "style": "scss",
          "skipTests": true
        },} 

  


ng g c usuario/usuario-list && ng g c estagiario/estagiario-list && ng g c pcontraria/pcontraria-list && ng g c supervisor/supervisor-list
   